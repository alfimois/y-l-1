const filter=(function(){'use strict';const cacheDom={};const filtersStack=[];function cachingDom(){cacheDom.lectures=document.querySelectorAll('.main__lecture');cacheDom.filterDateInput=document.querySelector('.lectures-filter__date-input');cacheDom.filterSchoolContent=document.querySelector('.lectures-filter__school-content');cacheDom.filterLectorContent=document.querySelector('.lectures-filter__lector-content');cacheDom.filterTiggle=document.querySelector('.lectures-filter__toggle');cacheDom.filterSchoolTitle=document.querySelector('.lectures-filter__school-title');cacheDom.filterLectorTitle=document.querySelector('.lectures-filter__lector-title')}
function addEvents(){cacheDom.filterDateInput.addEventListener('change',_=>filteredAllLecture());cacheDom.filterSchoolContent.addEventListener('mousedown',e=>{const targetClassList=e.target.classList;if(targetClassList.contains('lectures-filter__school-item')){targetClassList.toggle('active');filteredAllLecture()}});cacheDom.filterLectorContent.addEventListener('mousedown',e=>{const targetClassList=e.target.classList;if(targetClassList.contains('lectures-filter__lector-item')){targetClassList.toggle('active');filteredAllLecture()}});cacheDom.filterTiggle.addEventListener('mousedown',e=>{e.target.classList.toggle('active')});cacheDom.filterSchoolTitle.addEventListener('mousedown',e=>{e.target.classList.toggle('active')});cacheDom.filterLectorTitle.addEventListener('mousedown',e=>{e.target.classList.toggle('active')})}
function checkLectureOnOdd(lecture,i){if(i%2!==0){lecture.setAttribute('data-odd',!0)}else{lecture.setAttribute('data-odd',!1)}}
function checkLectureOnOverdue(lecture){const dateNow=Date.now();const lectureDate=new Date(lecture.querySelector('.main__lecture-date').innerText).valueOf();dateNow>lectureDate&&lecture.classList.add('main__lecture--ended')}
function prerenderingLectures(){[].forEach.call(cacheDom.lectures,(lecture,i)=>{[].forEach.call(arguments,renderFn=>{if(typeof renderFn!=='function')throw new Error('В функции пререндеринга один из переданных параметров не является функцией');renderFn(lecture,i)})})}
function filteredAllLecture(){let countTrueLecture=0;[].forEach.call(cacheDom.lectures,lecture=>{let isValidLecture=filtersStack.every(filterFunc=>filterFunc(lecture));if(isValidLecture===!0){countTrueLecture+=1;if(countTrueLecture%2!==0){lecture.setAttribute('data-odd',!0)}else{lecture.setAttribute('data-odd',!1)}
lecture.setAttribute('data-display',!0)}else lecture.setAttribute('data-display',!1)})}
function filterDate(lecture){const lectureDate=lecture.querySelector('.main__lecture-date');const correctInputDate=cacheDom.filterDateInput.value.replace(/-/g,'.');if(correctInputDate===''||lectureDate.innerText===correctInputDate)return!0;return!1}
function filterSchool(lecture){const activeSchoolFilterItems=document.querySelectorAll('.lectures-filter__school-item.active');if(activeSchoolFilterItems.length===0)return!0;return[].some.call(activeSchoolFilterItems,item=>{const filterText=item.innerText;const schoolsList=lecture.querySelectorAll('.main__name-of-school');return[].some.call(schoolsList,school=>school.innerText===filterText)})}
function filterLector(lecture){const activeLectorFilterItems=document.querySelectorAll('.lectures-filter__lector-item.active');if(activeLectorFilterItems.length===0)return!0;return[].some.call(activeLectorFilterItems,item=>{const filterText=item.innerText;const lectorsList=lecture.querySelectorAll('.main__name-of-lector');return[].some.call(lectorsList,lector=>lector.innerText===filterText)})}
function addFilterFnsToStack(){[].forEach.call(arguments,filterFn=>filtersStack.push(filterFn))}
return{init:_=>{cachingDom();prerenderingLectures(checkLectureOnOdd,checkLectureOnOverdue);addEvents();addFilterFnsToStack(filterDate,filterSchool,filterLector)},addFilter:(filterFn,eventName,eventFn)=>{}}})()